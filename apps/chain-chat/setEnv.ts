/* tslint:disable */
// @ts-nocheck
const { writeFile, existsSync, mkdirSync } = require('fs');
const { argv } = require('yargs');

const environment = argv.environment;

function writeFileUsingFS(targetPath, environmentFileContent) {
  writeFile(targetPath, environmentFileContent, function (err) {
    if (err) {
      console.log(err);
    }
    if (environmentFileContent !== '') {
      console.log(`wrote variables to ${targetPath}`);
    }
  });
}

// Providing path to the `environments` directory
const envDirectory = './src/environments';

// creates the `environments` directory if it does not exist
if (!existsSync(envDirectory)) {
  mkdirSync(envDirectory);
}

//creates the `environment.prod.ts` and `environment.ts` file if it does not exist
writeFileUsingFS('./src/environments/environment.prod.ts', '');
writeFileUsingFS('./src/environments/environment.ts', '');

// Checks whether command line argument of `prod` was provided signifying production mode
const isProduction = environment === 'prod';

// choose the correct targetPath based on the environment chosen
const targetPath = isProduction ? './src/environments/environment.prod.ts' : './src/environments/environment.ts';

//actual content to be compiled dynamically and pasted into respective environment files
const environmentFileContent = `// This file was autogenerated by dynamically running setEnv.ts and using dotenv for managing API key secrecy

  export const environment = {
    production: ${isProduction},
    INFURA_PROJECT_ID: '${process.env.INFURA_PROJECT_ID}',
    DEFAULT_PROVIDER_URL: '${process.env.DEFAULT_PROVIDER_URL}',
    CHATTER_CONTRACT_ADDRESS: '${process.env.CHATTER_CONTRACT_ADDRESS}',
    SPACE_TOKEN_ADDRESS: '${process.env.SPACE_TOKEN_ADDRESS}',
    EXPECTED_CHAIN_ID: '${process.env.EXPECTED_CHAIN_ID}',
  };
`;

writeFileUsingFS(targetPath, environmentFileContent); // appending data into the target file

/* tslint:enable */
