/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface ChatterInterface extends ethers.utils.Interface {
  functions: {
    'SPT()': FunctionFragment;
    'addMessage(string)': FunctionFragment;
    'allMessages()': FunctionFragment;
    'latestMessage()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'SPT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addMessage', values: [string]): string;
  encodeFunctionData(functionFragment: 'allMessages', values?: undefined): string;
  encodeFunctionData(functionFragment: 'latestMessage', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'SPT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addMessage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allMessages', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestMessage', data: BytesLike): Result;

  events: {};
}

export class Chatter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ChatterInterface;

  functions: {
    SPT(overrides?: CallOverrides): Promise<[string]>;

    addMessage(
      _meesage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allMessages(overrides?: CallOverrides): Promise<[([string, string] & { addr: string; message: string })[]]>;

    latestMessage(overrides?: CallOverrides): Promise<[[string, string] & { addr: string; message: string }]>;
  };

  SPT(overrides?: CallOverrides): Promise<string>;

  addMessage(
    _meesage: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allMessages(overrides?: CallOverrides): Promise<([string, string] & { addr: string; message: string })[]>;

  latestMessage(overrides?: CallOverrides): Promise<[string, string] & { addr: string; message: string }>;

  callStatic: {
    SPT(overrides?: CallOverrides): Promise<string>;

    addMessage(_meesage: string, overrides?: CallOverrides): Promise<void>;

    allMessages(overrides?: CallOverrides): Promise<([string, string] & { addr: string; message: string })[]>;

    latestMessage(overrides?: CallOverrides): Promise<[string, string] & { addr: string; message: string }>;
  };

  filters: {};

  estimateGas: {
    SPT(overrides?: CallOverrides): Promise<BigNumber>;

    addMessage(_meesage: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    allMessages(overrides?: CallOverrides): Promise<BigNumber>;

    latestMessage(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMessage(
      _meesage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allMessages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
